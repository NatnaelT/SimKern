clear
clc
[pathToPlottingFolder,pathToDataFolder,pathToLibSvmFolder,pathToMatlab2TikzFolder] = loadMyPaths();

load(fullfile(pathToDataFolder,'flowering.mat'))

myFontsize = 12;
myLinewidth = 3;

numeroTrainSamples = expInfo(1).numeroTrainSamples;
numeroValidationSamples = expInfo(1).numeroValidationSamples(1);
numeroTestSamples = expInfo(1).numeroTestSamples(1);

%% data
subsamplingIndLeft = 1;
subsamplingIndRight = 2;

x = expInfo(1).subsampledTestData{1}.outcome;
% standardXLeft = expInfo(1).subsampledTestData{1}.outcome;
standardYLeft = algs(1).linSvm.testPredictions{subsamplingIndLeft};

% simkernXLeft = expInfo(1).subsampledTestData{1}.outcome;
simkernYLeft = algs(1).skSvm.testPredictions{subsamplingIndLeft};

% standardXRight = expInfo(1).subsampledTestData{1}.outcome;
standardYRight = algs(1).linSvm.testPredictions{subsamplingIndRight};

% simkernXRight = expInfo(1).subsampledTestData{1}.outcome;
simkernYRight = algs(1).skSvm.testPredictions{subsamplingIndRight};

minVal = min([x; standardYLeft; simkernYLeft; standardYRight; simkernYRight]);
maxVal = max([x; standardYLeft; simkernYLeft; standardYRight; simkernYRight]);


disp(['LEFT R2 for linSVM: ' num2str(algs(1).linSvm.perfMetric(subsamplingIndLeft))])
disp(['LEFT R2 for linSVM: ' num2str(algs(1).skSvm.perfMetric(subsamplingIndLeft))])

disp(['RIGHT R2 for skSVM: ' num2str(algs(1).linSvm.perfMetric(subsamplingIndRight))])
disp(['RIGHT R2 for skSVM: ' num2str(algs(1).skSvm.perfMetric(subsamplingIndRight))])


figure('Units','inches',...
    'Position',[0 0 12 6],...
    'PaperPositionMode','auto')

myRed  = [217 95 2] ./255;
myGreen = [27 158 119] ./255;
%%
subplot(1,2,1)
subsamplingInd = 1;
title(['Trained on ' num2str(numeroTrainSamples(subsamplingIndLeft)) ' samples'],'Interpreter','Latex')

hold on

scatter(x,standardYLeft,'o','filled','MarkerFaceColor',myRed,'LineWidth',myLinewidth)
scatter(x,simkernYLeft,'o','filled','MarkerFaceColor',myGreen,'LineWidth',myLinewidth)
line([minVal maxVal],...
    [minVal maxVal],...
    'Color',[0 0 0],'LineWidth',myLinewidth)

set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')

xlabel('Observed outcome',...
    'Units','normalized',...
    'FontUnits','points',...
    'Interpreter','latex',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')

ylabel('Predicted outcome',...
    'Units','normalized',...
    'FontUnits','points',...
    'Interpreter','latex',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')

[myX,myY] = axxy2figxy(gca,3,15.5);
dim = [myX myY 0.001 0.001];
annotation('textbox',dim,'String','Flowering time model','FitBoxToText','on', ...
    'BackgroundColor',[5/6 5/6 5/6],'Interpreter','Latex','Color',[0 0 0]);

%%
subplot(1,2,2)
title(['Trained on ' num2str(numeroTrainSamples(subsamplingIndRight)) ' samples'],'Interpreter','Latex')

hold on

scatter(x,standardYRight,'o','filled','MarkerFaceColor',myRed,'LineWidth',myLinewidth)
scatter(x,simkernYRight,'o','filled','MarkerFaceColor',myGreen,'LineWidth',myLinewidth)
line([minVal maxVal],...
    [minVal maxVal],...
    'Color',[0 0 0],'LineWidth',myLinewidth)


myLegend = legend('linear SVM','SimKern SVM','Location','southeast');
set(myLegend,'Interpreter','latex');

set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')

xlabel('Observed outcome',...
    'Units','normalized',...
    'FontUnits','points',...
    'Interpreter','latex',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')

ylabel('Predicted outcome',...
    'Units','normalized',...
    'FontUnits','points',...
    'Interpreter','latex',...
    'FontWeight','normal',...
    'FontSize',myFontsize,...
    'FontName','Times')


set(gcf,'PaperOrientation','landscape')
print(fullfile(pathToPlottingFolder,'scatterPlot.pdf'),'-dpdf')

% % % % % standardX = expInfo(1).subsampledTestData{1}.outcome;
% % % % % standardY = algs(1).linSvm.testPredictions{2};
% % % % % minX = 0.9*min(standardX);
% % % % % maxX = 1.1*max(standardX);
% % % % % 
% % % % % minY = 0.9*min(standardY);
% % % % % maxY = 1.1*max(standardY);
% % % % % 
% % % % % minStandard = min(minX,minY);
% % % % % maxStandard = max(maxX,maxY);
% % % % % 
% % % % % simkernX = expInfo(1).subsampledTestData{1}.outcome;
% % % % % simkernY = algs(1).skSvm.testPredictions{2};
% % % % % minX = 0.9*min(simkernX);
% % % % % maxX = 1.1*max(simkernX);
% % % % % 
% % % % % minY = 0.9*min(simkernY);
% % % % % maxY = 1.1*max(simkernY);
% % % % % 
% % % % % minSimkern = min(minX,minY);
% % % % % maxSimkern = max(maxX,maxY);
% % % % % 
% % % % % myRed  = [217 95 2] ./255;
% % % % % myGreen = [27 158 119] ./255;
% % % % % 
% % % % % hold on
% % % % % 
% % % % % scatter(standardX,standardY,'o','filled','MarkerFaceColor',myRed,'LineWidth',myLinewidth)
% % % % % scatter(simkernX,simkernY,'o','filled','MarkerFaceColor',myGreen,'LineWidth',myLinewidth)
% % % % % line([min(minStandard,minSimkern) max(maxStandard,maxSimkern)],...
% % % % %     [min(minStandard,minSimkern) max(maxStandard,maxSimkern)],...
% % % % %     'Color',[0 0 0],'LineWidth',myLinewidth)
% % % % % 
% % % % % 
% % % % % myLegend = legend('linear SVM','SimKern SVM','Location','southeast');
% % % % % set(myLegend,'Interpreter','latex');
% % % % % 
% % % % % set(gca,...
% % % % %     'Units','normalized',...
% % % % %     'FontUnits','points',...
% % % % %     'FontWeight','normal',...
% % % % %     'FontSize',myFontsize,...
% % % % %     'FontName','Times')
% % % % % 
% % % % % xlabel('Observed outcome',...
% % % % %     'Units','normalized',...
% % % % %     'FontUnits','points',...
% % % % %     'Interpreter','latex',...
% % % % %     'FontWeight','normal',...
% % % % %     'FontSize',myFontsize,...
% % % % %     'FontName','Times')
% % % % % 
% % % % % ylabel('Predicted outcome',...
% % % % %     'Units','normalized',...
% % % % %     'FontUnits','points',...
% % % % %     'Interpreter','latex',...
% % % % %     'FontWeight','normal',...
% % % % %     'FontSize',myFontsize,...
% % % % %     'FontName','Times')
% % % % % 
% % % % % [myX,myY] = axxy2figxy(gca,3,17);
% % % % % dim = [myX myY 0.001 0.001];
% % % % % annotation('textbox',dim,'String','Flowering time model','FitBoxToText','on', ...
% % % % %     'BackgroundColor',[5/6 5/6 5/6],'Interpreter','Latex','Color',[0 0 0]);
